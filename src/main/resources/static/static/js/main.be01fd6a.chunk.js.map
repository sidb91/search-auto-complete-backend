{"version":3,"sources":["components/SearchAuto.js","App.js","reportWebVitals.js","index.js"],"names":["SearchAuto","useState","display","setDisplay","options","setOptions","search","setSearch","errorMessage","setErrorMessage","wrapperRef","useRef","useEffect","fetch","then","response","ok","Error","json","data","map","item","name","catch","errMsg","message","document","addEventListener","handleClickOutside","removeEventListener","event","wrap","current","contains","target","ref","className","id","onClick","placeholder","value","onChange","filter","city","toLowerCase","indexOf","v","i","tabIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4NAmFeA,EAjFI,WACjB,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAwCN,mBAAS,IAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACMC,EAAaC,iBAAO,MAE1BC,qBAAU,WACRC,MAAM,kBACHC,MAAK,SAACC,GAEL,IAAKA,EAASC,GACZ,MAAMC,MAAM,sCAEd,OAAOF,EAASG,UAEjBJ,MAAK,SAACK,GACLd,EAAWc,EAAKC,KAAI,SAACC,GAAD,OAAUA,EAAKC,YAEpCC,OAAM,SAACC,GAENf,EAAgBe,EAAOC,cAE1B,IAQHb,qBAAU,WAGR,OAFAc,SAASC,iBAAiB,YAAaC,GAEhC,WACLF,SAASG,oBAAoB,YAAaD,MAE3C,IAEH,IAAMA,EAAqB,SAACE,GAC1B,IAAiBC,EAASrB,EAAlBsB,QACJD,IAASA,EAAKE,SAASH,EAAMI,SAC/B/B,GAAW,IAIf,OACE,sBAAKgC,IAAKzB,EAAY0B,UAAU,qCAAhC,UACG5B,GAAgB,wBAAQ4B,UAAU,aAAlB,SAAgC5B,IACjD,uBACE6B,GAAG,OACHC,QAAS,kBAAMnC,GAAYD,IAC3BqC,YAAY,iBACZC,MAAOlC,EACPmC,SAAU,SAACX,GAAD,OAAWvB,EAAUuB,EAAMI,OAAOM,UAE7CtC,GACC,qBAAKkC,UAAU,gBAAf,SACGhC,EACEsC,QAAO,SAACC,GACP,OAAOA,EAAKC,cAAcC,QAAQvC,EAAOsC,gBAAkB,KAE5DxB,KAAI,SAAC0B,EAAGC,GAEP,OACE,qBACET,QAAS,kBAvCvB/B,EAuC2CuC,QAtC3C3C,GAAW,IAuCGiC,UAAU,SAEVY,SAAS,IAJX,SAME,+BAAOF,KAHFC,YCxDRE,MAXf,WACE,OACE,sBAAKb,UAAU,MAAf,UACE,+CACA,qBAAKA,UAAU,iBAAf,SACE,cAAC,EAAD,UCIOc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,SAM1BX,K","file":"static/js/main.be01fd6a.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nconst SearchAuto = () => {\r\n  const [display, setDisplay] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const wrapperRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/v1/cities\")\r\n      .then((response) => {\r\n        //console.log(response);\r\n        if (!response.ok) {\r\n          throw Error(\"could not fetch data from resource\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setOptions(data.map((item) => item.name));\r\n      })\r\n      .catch((errMsg) => {\r\n        //console.log(errMsg.message);\r\n        setErrorMessage(errMsg.message);\r\n      });\r\n  }, []);\r\n\r\n  const setSearchCity = (searchCity) => {\r\n    //console.log(searchCity);\r\n    setSearch(searchCity);\r\n    setDisplay(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const handleClickOutside = (event) => {\r\n    const { current: wrap } = wrapperRef;\r\n    if (wrap && !wrap.contains(event.target)) {\r\n      setDisplay(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div ref={wrapperRef} className=\"flex-container flex-column pos-rel\">\r\n      {errorMessage && <strong className=\"error-text\">{errorMessage}</strong>}\r\n      <input\r\n        id=\"auto\"\r\n        onClick={() => setDisplay(!display)}\r\n        placeholder=\"Type to search\"\r\n        value={search}\r\n        onChange={(event) => setSearch(event.target.value)}\r\n      />\r\n      {display && (\r\n        <div className=\"autoContainer\">\r\n          {options\r\n            .filter((city) => {\r\n              return city.toLowerCase().indexOf(search.toLowerCase()) > -1;\r\n            })\r\n            .map((v, i) => {\r\n              //console.log(i + \" \" + v);\r\n              return (\r\n                <div\r\n                  onClick={() => setSearchCity(v)}\r\n                  className=\"option\"\r\n                  key={i}\r\n                  tabIndex=\"0\"\r\n                >\r\n                  <span>{v}</span>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchAuto;\r\n","import \"./App.css\";\nimport SearchAuto from \"./components/SearchAuto\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Search Cities</h1>\n      <div className=\"auto-container\">\n        <SearchAuto />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}